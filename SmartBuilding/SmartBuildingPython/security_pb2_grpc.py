# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import security_pb2 as security__pb2


class SecurityServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.securitySwitch = channel.unary_unary(
                '/security.SecurityService/securitySwitch',
                request_serializer=security__pb2.SecurityRequest.SerializeToString,
                response_deserializer=security__pb2.SecurityResponse.FromString,
                )
        self.Liststaff = channel.unary_stream(
                '/security.SecurityService/Liststaff',
                request_serializer=security__pb2.ListRequest.SerializeToString,
                response_deserializer=security__pb2.ListResponse.FromString,
                )
        self.grantAccess = channel.stream_unary(
                '/security.SecurityService/grantAccess',
                request_serializer=security__pb2.AccessRequest.SerializeToString,
                response_deserializer=security__pb2.AccessResponse.FromString,
                )


class SecurityServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def securitySwitch(self, request, context):
        """unary
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Liststaff(self, request, context):
        """server side streaming
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def grantAccess(self, request_iterator, context):
        """client side streaming
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SecurityServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'securitySwitch': grpc.unary_unary_rpc_method_handler(
                    servicer.securitySwitch,
                    request_deserializer=security__pb2.SecurityRequest.FromString,
                    response_serializer=security__pb2.SecurityResponse.SerializeToString,
            ),
            'Liststaff': grpc.unary_stream_rpc_method_handler(
                    servicer.Liststaff,
                    request_deserializer=security__pb2.ListRequest.FromString,
                    response_serializer=security__pb2.ListResponse.SerializeToString,
            ),
            'grantAccess': grpc.stream_unary_rpc_method_handler(
                    servicer.grantAccess,
                    request_deserializer=security__pb2.AccessRequest.FromString,
                    response_serializer=security__pb2.AccessResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'security.SecurityService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SecurityService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def securitySwitch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/security.SecurityService/securitySwitch',
            security__pb2.SecurityRequest.SerializeToString,
            security__pb2.SecurityResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Liststaff(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/security.SecurityService/Liststaff',
            security__pb2.ListRequest.SerializeToString,
            security__pb2.ListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def grantAccess(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/security.SecurityService/grantAccess',
            security__pb2.AccessRequest.SerializeToString,
            security__pb2.AccessResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
